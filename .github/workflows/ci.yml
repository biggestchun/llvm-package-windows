name: Build LLVM 18

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-llvm:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Install dependencies
      run: |
        choco install -y cmake ninja   

    - name: Download LLVM 18 source
      run: |
        git clone --recurse-submodules --branch release/18.x https://github.com/llvm/llvm-project.git 
        if ($LASTEXITCODE -ne 0) {
          git clone --recurse-submodules --branch llvmorg-18.0.0 https://github.com/llvm/llvm-project.git
        }
        if ($LASTEXITCODE -ne 0) {
          git clone --recurse-submodules https://github.com/llvm/llvm-project.git
        }
        
    - name: Setup Visual Studio tools
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Add VS Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Configure LLVM tools
      run: |
        mkdir llvm-build
        cd llvm-build
        cmake -G Ninja ..\llvm-project\llvm `
        -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" `
        -DLLVM_ENABLE_PROJECTS="" `
        -DLIBCXX_ENABLE_SHARED=OFF `
        -DLIBCXX_ENABLE_STATIC=ON `
        -DLIBCXXABI_ENABLE_SHARED=OFF `
        -DLIBCXXABI_ENABLE_STATIC=ON `
        -DLIBUNWIND_ENABLE_SHARED=OFF `
        -DLIBUNWIND_ENABLE_STATIC=ON `
        -DLLVM_ENABLE_BLAKE3_ASSEMBLY_OPTIMIZATIONS=OFF `
        -DLLVM_INTEGRATED_AS=ON `
        -DCMAKE_EXE_LINKER_FLAGS="-lws2_32 -lole32" `
        -DCMAKE_SHARED_LINKER_FLAGS="-lws2_32 -lole32" `
        -DCXX_SUPPORTS_FNO_EXCEPTIONS_FLAG=ON `
        -DCXX_SUPPORTS_FUNWIND_TABLES_FLAG=ON `
        -DLLVM_ENABLE_EH=ON `
        -DLLVM_ENABLE_RTTI=ON `
        -DLLVM_HOST_TRIPLE="x86_64-pc-windows-msvc" `
        -DCMAKE_SYSTEM_NAME=Windows `
        -DCMAKE_BUILD_TYPE=Release `
        -DCMAKE_C_COMPILER=clang-cl `
        -DCMAKE_CXX_COMPILER=clang-cl `
        -DCMAKE_LINKER=lld-link `
        -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=NO `
        -DLIBCXX_CXX_ABI=libcxxabi `
        -DLIBCXX_CXX_ABI_INCLUDE_PATHS="../llvm-project/libcxxabi/include" `
        -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON `
        -DLIBCXX_HARDENING_MODE=none `
        -DLIBUNWIND_USE_COMPILER_RT=ON `
        -DLIBUNWIND_ENABLE_CROSS_UNWINDING=OFF `
        -DLIBUNWIND_ENABLE_STATIC_CXX=ON `
        -DLLVM_INCLUDE_TESTS=OFF `
        -DLLVM_INCLUDE_EXAMPLES=OFF `
        -DLLVM_INCLUDE_BENCHMARKS=OFF `
        -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\llvm-install"

    - name: Build LLVM tools
      run: |
        cd llvm-build
        ninja

    - name: Install LLVM tools
      run: |
        cd llvm-build
        ninja install


    - name: Configure LLVM
      run: |
        cd llvm-build
        cmake -G Ninja ..\llvm-project\llvm `
          -DLLVM_ENABLE_Z3_SOLVER=OFF `
          -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld" `
          -DLLVM_FORCE_BUILD_RUNTIME=ON `
          -DCLANG_BUILD_TOOLS=ON `
          -DLLVM_ENABLE_DUMP=ON `
          -DLLVM_ENABLE_LIBCXX=ON `
          -DLLVM_HOST_TRIPLE="x86_64-pc-windows-msvc" `
          -DCMAKE_EXE_LINKER_FLAGS="-lws2_32 -lole32" `
          -DCMAKE_SHARED_LINKER_FLAGS="-lws2_32 -lole32" `
          -DLIBUNWIND_ENABLE_SHARED=OFF `
          -DCXX_SUPPORTS_FNO_EXCEPTIONS_FLAG=ON `
          -DCXX_SUPPORTS_FUNWIND_TABLES_FLAG=ON `
          -DLLVM_ENABLE_EH=ON `
          -DLLVM_ENABLE_RTTI=ON `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_C_COMPILER=clang `
          -DCMAKE_CXX_COMPILER=clang++ `
          -DLLVM_TARGETS_TO_BUILD="X86" `
          -DLLVM_OPTIMIZED_TABLEGEN=ON `
          -DLLVM_USE_LINKER=lld `
          -DLLVM_INCLUDE_TESTS=OFF `
          -DLLVM_INCLUDE_EXAMPLES=OFF `
          -DLLVM_INCLUDE_BENCHMARKS=OFF `
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\llvm-install"

    - name: Build LLVM
      run: |
        cd llvm-build
        ninja
        
    - name: Install LLVM
      run: |
        cd llvm-build
        ninja install
        
   
    - name: Upload LLVM build
      uses: actions/upload-artifact@v4
      with:
        name: llvm-18-build
        path: ${{ github.workspace }}\llvm-install

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ github.workspace }}\llvm-install\**
        name: LLVM Build ${{ github.run_number }}
        tag_name: build-${{ github.run_number }}  # Auto-generates a tag
        generate_release_notes: true
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

