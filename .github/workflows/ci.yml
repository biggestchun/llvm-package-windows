name: Build LLVM 18

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-llvm:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
    - name: Install dependencies
      run: |
        choco install -y cmake ninja llvm
    
    # Cache LLVM source code
    - name: Cache LLVM source
      id: cache-llvm-source
      uses: actions/cache@v3
      with:
        path: llvm-project
        key: ${{ runner.os }}-llvm-18-source
        restore-keys: |
          ${{ runner.os }}-llvm-18-source-

    # Download source if not cached
    - name: Download LLVM 18 source
      if: steps.cache-llvm-source.outputs.cache-hit != 'true'
      run: |
        if (Test-Path llvm-project) {
          Remove-Item llvm-project -Recurse -Force
        }
        git clone --recurse-submodules --branch release/18.x https://github.com/llvm/llvm-project.git 
        if ($LASTEXITCODE -ne 0) {
          git clone --recurse-submodules --branch llvmorg-18.0.0 https://github.com/llvm/llvm-project.git
        }
        if ($LASTEXITCODE -ne 0) {
          git clone --recurse-submodules https://github.com/llvm/llvm-project.git
        }
    
    # Cache CMake build files
    - name: Cache build directory
      id: cache-build-dir
      uses: actions/cache@v3
      with:
        path: llvm-build
        key: ${{ runner.os }}-llvm-18-build-${{ hashFiles('**/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-llvm-18-build-${{ hashFiles('**/ci.yml') }}-
          ${{ runner.os }}-llvm-18-build-

    - name: Configure LLVM
      if: steps.cache-build-dir.outputs.cache-hit != 'true'
      run: |
        if (Test-Path llvm-build) {
          Remove-Item llvm-build -Recurse -Force
        }
        mkdir llvm-build
        cd llvm-build
        cmake -G Ninja ..\llvm-project\llvm `
          -DLLVM_ENABLE_Z3_SOLVER=OFF `
          -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld" `
          -DLLVM_ENABLE_RUNTIMES="" `
          -DLLVM_ENABLE_DUMP=ON `
          -DLLVM_HOST_TRIPLE="x86_64-pc-windows-msvc" `
          -DCMAKE_EXE_LINKER_FLAGS="-lws2_32 -lole32" `
          -DCMAKE_SHARED_LINKER_FLAGS="-lws2_32 -lole32" `
          -DLLVM_ENABLE_EH=ON `
          -DLLVM_ENABLE_RTTI=ON `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_C_COMPILER=clang `
          -DCMAKE_CXX_COMPILER=clang++ `
          -DLLVM_TARGETS_TO_BUILD="X86" `
          -DLLVM_OPTIMIZED_TABLEGEN=ON `
          -DLLVM_USE_LINKER=lld `
          -DLLVM_INCLUDE_TESTS=OFF `
          -DLLVM_INCLUDE_EXAMPLES=OFF `
          -DLLVM_INCLUDE_BENCHMARKS=OFF `
          -DCMAKE_INSTALL_PREFIX="D:\a\llvm-package-windows\llvm-package-windows\llvm-install"
      shell: pwsh
    
    # Cache installed artifacts
    - name: Cache installed artifacts
      id: cache-llvm-install
      uses: actions/cache@v3
      with:
        path: llvm-install
        key: ${{ runner.os }}-llvm-18-install-${{ hashFiles('**/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-llvm-18-install-${{ hashFiles('**/ci.yml') }}-
          ${{ runner.os }}-llvm-18-install-

    # Check if we need to build/install
    - name: Check if install is needed
      id: check-install
      if: steps.cache-llvm-install.outputs.cache-hit == 'true'
      run: |
        if (Test-Path -Path "${{ github.workspace }}\llvm-install\bin\clang.exe") {
          echo "::set-output name=install_complete::true"
        } else {
          echo "::set-output name=install_complete::false"
        }

    # Build LLVM if needed
    - name: Build LLVM
      if: steps.cache-llvm-install.outputs.cache-hit != 'true' || steps.check-install.outputs.install_complete != 'true'
      run: |
        cd llvm-build
        ninja

    # Install LLVM if needed
    - name: Install LLVM
      if: steps.cache-llvm-install.outputs.cache-hit != 'true' || steps.check-install.outputs.install_complete != 'true'
      run: |
        mkdir llvm-install
        cd llvm-build
        ninja install

    # Create artifact archive
    - name: Create LLVM archive
      run: |
        cd ${{ github.workspace }}
        7z a -tzip llvm-18-windows.zip .\llvm-install\*

    # Upload artifacts for job access
    - name: Upload LLVM build
      uses: actions/upload-artifact@v4
      with:
        name: llvm-18-build
        path: ${{ github.workspace }}\llvm-install
        
    # Get version information for release
    - name: Get LLVM version
      id: get-version
      run: |
        $version = & "${{ github.workspace }}\llvm-install\bin\clang.exe" --version | Select-String -Pattern "version (\d+\.\d+\.\d+)" | ForEach-Object { $_.Matches.Groups[1].Value }
        if (-not $version) { $version = "18.0.0" }
        $buildDate = Get-Date -Format "yyyyMMdd"
        echo "::set-output name=llvm_version::$version"
        echo "::set-output name=build_date::$buildDate"
      shell: pwsh

    # Create release
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      if: github.event_name != 'pull_request'
      with:
        name: LLVM ${{ steps.get-version.outputs.llvm_version }} (Build ${{ steps.get-version.outputs.build_date }})
        tag_name: llvm-${{ steps.get-version.outputs.llvm_version }}-${{ steps.get-version.outputs.build_date }}
        files: ${{ github.workspace }}\llvm-18-windows.zip
        draft: false
        prerelease: false
        body: |
          LLVM ${{ steps.get-version.outputs.llvm_version }} Windows Build
          
          Build date: ${{ steps.get-version.outputs.build_date }}
          
          This release contains:
          - LLVM ${{ steps.get-version.outputs.llvm_version }}
          - Clang
          - Clang Extra Tools
          - LLD (LLVM Linker)
          
          Built with optimizations for Windows x86_64.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
